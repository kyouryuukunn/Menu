赤恐竜	http://akakyouryuu.blog.fc2.com/

よくあるコンフィグ画面を実装する(のを助けるプラグイン、単体では何もしない。)
画面のデザインを容易にする。
スライダーとトグルボタンには色々な墓場のKLayers.ksを利用している
そちらのライセンスも要確認

もしも使いたい人がいたなら好きに使ってください
改変、再配布は自由、使用を明記する必要も報告する必要もないけど報告をくれるとうれしいです。
マウスカーソル自動移動は
サークル煌明のMoveMouseCursorPluginがあれば
それをつかう


ボタンとトグルボタン、スライダーを1ページにつきそれぞれ5、15、10個づつ、3ページ用意してあり、
それぞれ表示、非表示、座標と動作時のサブルーチンを設定可能
またコンフィグ画面開始と終了時、ページ切り替え時にもサブルーチンを呼ぶ

サブルーチンはconfig_sub.ksの次のラベルを呼び出す
開始時			:*config_sub_start
終了時			:*config_sub_close
ページ切り替え時時	:*config_sub_page1 ~ 3
ボタンを押した時	:*config_sub_button_00 ~ 14
トグルボタンを押した時	:*config_sub_togglebutton_00 ~ 44
スライダーを移動した時	:*config_sub_slider_00 ~ 29

使用法

config_init.ksの変数を各自必要に応じて設定する
config_sub.ksに実際の処理を書く
コメントを参照すればわかるはず。
詳しくはサンプル参照。設定が出来たら
first.ksで次のようにconfig_init.ksを呼び出す
@call storage=config_init.ks

あとは必要な時にサブルーチンとして呼び出せばよい

Menu.ksに添付しているconfig_init.ksとconifg_sub.ks
にはすでに処理が書かれている。

*注意点--------------------------------------------------------------------- 


開始時のサブルーチン *config_sub_start はテンプセーブとレイヤの追加が終わった後に呼ばれる。
終了時のサブルーチン *config_sub_close はテンプロード後におこなわれる。

メッセージレイヤを使いたいときは ------------------------------------------- 

メッセージレイヤはなにも使っていません。好きに使ってください
ただしレイヤをクリアするときは[cm]ではなく[er]を使うこと


追加のレイヤを使いたいときは------------------------------------------------ 
背景に(現在の前景レイヤ数 - 1), メッセージレイヤに(現在のメッセージレイヤ数 - 1)
が使われるので、追加のレイヤを使いたいときは(現在の前景, メッセージレイヤ数 - 2)を使う
このとき、laycountを使うとインデックスが変わってしまうので再設定が必要
背景、メッセージレイヤそれぞれインデックスは2000100, 2000200です
(例)
;前景レイヤを追加
@laycount layers="&kag.numCharacterLayers + 1"
;背景用レイヤの設定
@layopt index="&2000000+100" layer="&kag.numCharacterLayers - 1"
;追加の前景レイヤの設定
@layopt index="&2000000+101" layer="&kag.numCharacterLayers - 2"
;メッセージレイヤの設定
@layopt index="&2000000+200" layer="&'message'+ ( kag.numMessageLayers - 1 )"

;追加のレイヤに何か画像を読み込む
@image layer="&kag.numCharacterLayers - 2" storage=sample

ラジオボタンを使いたいときは ----------------------------------------------- 

ラジオボタン(いくつかのボタンのグループのうち、一つをONにすると他のボタンがOFFになるもの)
を実現するにはトグルボタンを使い、次のようにする

先に値を入れ
config_plugin_obj.togglebutton_(該当の番号) = tf.config_togglebutton[( ボタン番号 - 15 * (現在のページ - 1) )].checked = (変更したい値 0 or 1)
次の関数で表示を変える
tf.config_togglebutton[( ボタン番号 - 15 * (現在のページ - 1) )].draw()

(例)
25,26,27番のトグルボタンのうち一つのみがONになるようにするとき
*config_sub_togglebutton_25で記述するべき文

@if exp="config_plugin_obj.togglebutton_25"
	;25番がONになったときは他のボタンをOFFにする
	@eval exp="config_plugin_obj.togglebutton_26 = tf.config_togglebutton[11].checked = 0"
	@eval exp="config_plugin_obj.togglebutton_27 = tf.config_togglebutton[12].checked = 0"
	@eval exp="tf.config_togglebutton[11].draw()"
	@eval exp="tf.config_togglebutton[12].draw()"
@else
	;25番がOFFになったときはONにしなおす
	@eval exp="config_plugin_obj.togglebutton_25 = tf.config_togglebutton[10].checked = 1"
	@eval exp="tf.config_togglebutton[10].draw()"
@endif

